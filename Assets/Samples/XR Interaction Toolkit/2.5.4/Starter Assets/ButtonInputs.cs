//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Samples/XR Interaction Toolkit/2.5.4/Starter Assets/ButtonInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ButtonInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ButtonInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ButtonInputs"",
    ""maps"": [
        {
            ""name"": ""OculusButton"",
            ""id"": ""ef11baa9-82b0-40ef-8b78-608d66c4a259"",
            ""actions"": [
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""a29da398-d558-4aba-a4a8-349a4a1e5574"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1f8f759-1ac9-4e67-a4e6-acc76b087286"",
                    ""path"": ""<XRController>{RightHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""OculusController"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35154685-b162-4e53-911b-16bdbf803fdf"",
                    ""path"": ""<XRController>{LeftHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""OculusController"",
            ""bindingGroup"": ""OculusController"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // OculusButton
        m_OculusButton = asset.FindActionMap("OculusButton", throwIfNotFound: true);
        m_OculusButton_Menu = m_OculusButton.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OculusButton
    private readonly InputActionMap m_OculusButton;
    private List<IOculusButtonActions> m_OculusButtonActionsCallbackInterfaces = new List<IOculusButtonActions>();
    private readonly InputAction m_OculusButton_Menu;
    public struct OculusButtonActions
    {
        private @ButtonInputs m_Wrapper;
        public OculusButtonActions(@ButtonInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Menu => m_Wrapper.m_OculusButton_Menu;
        public InputActionMap Get() { return m_Wrapper.m_OculusButton; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OculusButtonActions set) { return set.Get(); }
        public void AddCallbacks(IOculusButtonActions instance)
        {
            if (instance == null || m_Wrapper.m_OculusButtonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OculusButtonActionsCallbackInterfaces.Add(instance);
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IOculusButtonActions instance)
        {
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IOculusButtonActions instance)
        {
            if (m_Wrapper.m_OculusButtonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOculusButtonActions instance)
        {
            foreach (var item in m_Wrapper.m_OculusButtonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OculusButtonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OculusButtonActions @OculusButton => new OculusButtonActions(this);
    private int m_OculusControllerSchemeIndex = -1;
    public InputControlScheme OculusControllerScheme
    {
        get
        {
            if (m_OculusControllerSchemeIndex == -1) m_OculusControllerSchemeIndex = asset.FindControlSchemeIndex("OculusController");
            return asset.controlSchemes[m_OculusControllerSchemeIndex];
        }
    }
    public interface IOculusButtonActions
    {
        void OnMenu(InputAction.CallbackContext context);
    }
}
